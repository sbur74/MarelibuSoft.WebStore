// <auto-generated />
using System;
using MarelibuSoft.WebStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MarelibuSoft.WebStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.BankAcccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountOwner")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Iban")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Institute")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SwiftBic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("BankAcccounts");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HtmlDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(155) CHARACTER SET utf8mb4")
                        .HasMaxLength(155);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CategoryAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryDetailID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("CategorySubID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("CategoryAssignments");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CategoryDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorySubID")
                        .HasColumnType("int");

                    b.Property<string>("HtmlDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(155) CHARACTER SET utf8mb4")
                        .HasMaxLength(155);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("CategorySubID");

                    b.ToTable("CategoryDetails");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CategorySub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("HtmlDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("varchar(155) CHARACTER SET utf8mb4")
                        .HasMaxLength(155);

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("CategorySubs");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CmsPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LayoutEnum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PageContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PageDesciption")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PageEnum")
                        .HasColumnType("int");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CmsPages");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CmsPageDraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DraftOfPageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LayoutEnum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PageContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PageDesciption")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PageEnum")
                        .HasColumnType("int");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CmsPageDrafts");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CmsStartPage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HeadContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LeftContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RightContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("CmsStartPages");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAllowedShipping")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Customer", b =>
                {
                    b.Property<byte[]>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("AdditionalAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("AllowedPayByBill")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CustomerGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Rabatt")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CustomerGroupAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("CustomerID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("CustomerGroupAssignments");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Ebook", b =>
                {
                    b.Property<int>("EbookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FkProductID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PathFileID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Version")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EbookID");

                    b.ToTable("Ebooks");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Guest", b =>
                {
                    b.Property<int>("GuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GuestID");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Impressum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bank")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Bic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Iban")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShopAdmin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShopName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Impressums");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.LawContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HtmlContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SiteType")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("LawContents");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Order", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CartID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("CustomerID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("ExceptLawConditions")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FreeText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("GustID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShippingPriceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Shippingdate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderCompletionText", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PaymendType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("OrderCompletionTexts");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderLine", b =>
                {
                    b.Property<int>("OrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("OrderID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SellBasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.HasKey("OrderLineID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderLineTextOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("OrderLineId");

                    b.ToTable("OrderLineTextOptions");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderLineVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Combi")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrderLineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductVariant")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantOption")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VarinatName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("OrderLineId");

                    b.ToTable("OrderLineVariantValue");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Paymend", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PaymendType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Paymends");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AvailableQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BasesUnitID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShowTextVariant")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("MinimumPurchaseQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("SecondBasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SecondBaseUnit")
                        .HasColumnType("int");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeoKeywords")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ShippingPeriod")
                        .HasColumnType("int");

                    b.Property<int>("ShippingPriceType")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("TextVariantTitel")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ProductVariant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CombiOptionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAbsolutelyNecessary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OptionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ProductVariantOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Combi")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsNotShown")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Option")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductVariantID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ID");

                    b.HasIndex("ProductVariantID");

                    b.ToTable("ProductVariantOptions");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.SellAction", b =>
                {
                    b.Property<int>("SellActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SellActionID");

                    b.ToTable("SellActions");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.SellActionItem", b =>
                {
                    b.Property<int>("SellActionItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FkProductID")
                        .HasColumnType("int");

                    b.Property<int>("SellActionID")
                        .HasColumnType("int");

                    b.HasKey("SellActionItemID");

                    b.HasIndex("SellActionID");

                    b.ToTable("SellActionItems");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShippingAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<byte[]>("CustomerID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsInvoiceAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMainAddress")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShippingPeriod", b =>
                {
                    b.Property<int>("ShippingPeriodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Decription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ShippingPeriodID");

                    b.ToTable("ShpippingPeriods");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShippingPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShippingPriceTypeId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ShippingPriceTypeId");

                    b.ToTable("ShippingPrices");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShippingPriceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("ShippingPriceTypes");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShopContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ShowIn")
                        .HasColumnType("int");

                    b.Property<string>("Site")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("ShopContents");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShopFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ShopFileType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ShopFiles");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCart", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("OrderId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TabCounter")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCartLine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SellActionItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellBasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<byte[]>("ShoppingCartID")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("UnitID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ShoppingCartID");

                    b.ToTable("ShoppingCartLines");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCartLineTextOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartLineId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("ShoppingCartLineId");

                    b.ToTable("ShoppingCartLineTextOptions");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCartLineVariantValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Combi")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductVariant")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantOption")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ShoppingCartLineId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartLineId");

                    b.ToTable("ShoppingCartLineVariantValue");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Size", b =>
                {
                    b.Property<int>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SizeID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.Unit", b =>
                {
                    b.Property<int>("UnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LongName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UnitID");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.VariantOptionTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Option")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("VariantTemplateId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VariantTemplateId");

                    b.ToTable("VariantOptionTemplates");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.VariantProductAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("VariantID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("VariantProductAssignments");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.VariantTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OptionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("VariantTemplates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CategoryAssignment", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.Product", "Product")
                        .WithMany("CategoryAssignments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CategoryDetail", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.CategorySub", "Sub")
                        .WithMany("Details")
                        .HasForeignKey("CategorySubID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CategorySub", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.Category", "Category")
                        .WithMany("Subs")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.CustomerGroupAssignment", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.CustomerGroup", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderLine", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.Order", "Order")
                        .WithMany("OderLines")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderLineTextOption", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.OrderLine", "OrderLine")
                        .WithMany("OrderLineTextOptions")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.OrderLineVariantValue", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.OrderLine", "OrderLine")
                        .WithMany("VariantValues")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ProductImage", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.Product", "Product")
                        .WithMany("ImageList")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ProductVariant", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ProductVariantOption", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ProductVariant", "Variant")
                        .WithMany("Options")
                        .HasForeignKey("ProductVariantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.SellActionItem", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.SellAction", "SellAction")
                        .WithMany("SellActionItems")
                        .HasForeignKey("SellActionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShippingPrice", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ShippingPriceType", "ShippingPriceType")
                        .WithMany("Prices")
                        .HasForeignKey("ShippingPriceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCartLine", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Lines")
                        .HasForeignKey("ShoppingCartID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCartLineTextOption", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ShoppingCartLine", "ShoppingCartLine")
                        .WithMany("ShoppingCartLineTextOptions")
                        .HasForeignKey("ShoppingCartLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.ShoppingCartLineVariantValue", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ShoppingCartLine", "CartLine")
                        .WithMany("VariantValues")
                        .HasForeignKey("ShoppingCartLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MarelibuSoft.WebStore.Models.VariantOptionTemplate", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.VariantTemplate", "VariantTemplate")
                        .WithMany("VariantOptionTemplates")
                        .HasForeignKey("VariantTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MarelibuSoft.WebStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MarelibuSoft.WebStore.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
